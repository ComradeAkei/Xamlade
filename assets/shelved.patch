Index: Reflector.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Reflection;\nusing System.Runtime.InteropServices;\nusing Avalonia;\nusing Microsoft.Diagnostics.Runtime;\nusing System.Runtime.InteropServices;\n\nnamespace Xamlade;\n\n\n\n\npublic static class Reflector\n{\n    public static void SetName(string? name, JControl element)\n    {\n        FieldInfo privateField =\n            typeof(StyledElement).GetField(\"_name\", BindingFlags.NonPublic | BindingFlags.Instance);\n        privateField.SetValue(element, name);\n    }\n    \n    \n    public static void PrintFieldsForType(ClrRuntime runtime, string targetType)\n    {\n        int i = 0;\n        ClrHeap heap = runtime.Heap;\n        foreach (var ptr in heap.EnumerateObjects())\n        {\n            ClrType type = heap.GetObjectType(ptr);\n            if (type.Name == targetType)\n            {\n                i++;\n            }\n        }\n        Console.WriteLine(targetType+\": \"+i);\n    }\n\n    \n      \n    \n    \n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Reflector.cs b/Reflector.cs
--- a/Reflector.cs	(revision 6d88d179a1efbc490e8acf93ca9833ce31f897b0)
+++ b/Reflector.cs	(date 1719904874182)
@@ -14,6 +14,11 @@
 
 public static class Reflector
 {
+    /// <summary>
+    /// Устанавливает имя элементу JControl
+    /// </summary>
+    /// <param name="name">новое имя</param>
+    /// <param name="element">элемент JControl</param>
     public static void SetName(string? name, JControl element)
     {
         FieldInfo privateField =
Index: Colors.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Colors.txt b/Colors.txt
new file mode 100644
--- /dev/null	(date 1719916284374)
+++ b/Colors.txt	(date 1719916284374)
@@ -0,0 +1,1 @@
+#0ab076 Зелёный
\ No newline at end of file
Index: Miscellaneous.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\nusing System.Linq;\nusing System.Reflection;\nusing Avalonia;\nusing Avalonia.Controls;\nusing Avalonia.Controls.Templates;\nusing Avalonia.Data;\nusing Avalonia.Layout;\nusing Avalonia.Media;\nusing Avalonia.Media.Imaging;\nusing AvaloniaColorPicker;\n\nnamespace Xamlade;\n\npublic partial class MainWindow\n{\n    private static bool LCtrlPressed = false;\n    public static bool ResizeFlag = false;\n    private static ItemCollection PropListItems;\n  //Принудительный вызов конструктора ItemCollection\n  ConstructorInfo? constructor = typeof(ItemCollection).GetConstructor(\n      BindingFlags.Instance | BindingFlags.NonPublic,\n      null,\n      Type.EmptyTypes,\n      null);\n\n\n    \n    private void AddPropItem(string name, object? value,Type type)\n    {\n        var listItem = new ListBoxItem();\n        var dockPanel = new DockPanel\n        {\n            Height = 32\n        };\n        \n        var textBlock = new TextBlock\n        {\n            Text = name,\n            //  DockPanel.Dock=\"Left\" VerticalAlignment=\"Center\"\n            Foreground = GetColor(\"#88F1FF\"),\n            FontWeight = FontWeight.Normal,\n            FontSize = 18,\n            HorizontalAlignment = HorizontalAlignment.Right,\n            VerticalAlignment = VerticalAlignment.Center,\n            Margin = new Thickness(10,0,0,0),\n            MaxWidth=150\n        };\n        DockPanel.SetDock(textBlock,Dock.Left);\n        dockPanel.Children.Add(textBlock);\n        \n        \n        if (type == typeof(int) || type == typeof(string) || \n            type == typeof(double) || name == \"Content\" || \n            type == typeof(Thickness) || type == typeof(CornerRadius) || \n            type == typeof(Rect) )\n        {\n            var _propElement = new TextBox();\n            _propElement.Text = value?.ToString();\n            _propElement.Foreground = GetColor(\"#88F1FF\");\n            _propElement.FontWeight = FontWeight.Normal;\n            _propElement.HorizontalAlignment = HorizontalAlignment.Right;\n            _propElement.VerticalAlignment = VerticalAlignment.Center;\n            _propElement.Margin = new Thickness(5, 0, 0, 0);\n            _propElement.KeyDown += OnPropertyChanged;\n            DockPanel.SetDock(_propElement, Dock.Right);\n            dockPanel.Children.Add(_propElement);\n        }\n        //Для цветов\n        else if (type == typeof(IBrush))\n        {\n            var stackPanel = new StackPanel{Orientation = Orientation.Horizontal};\n            var _textBlock = new TextBlock();\n            \n            if (value != null)\n            {\n                var colorButton = new ColorButton\n                {\n                    Color = Color.Parse(value.ToString())\n                };\n                colorButton.PropertyChanged += OnColorChanged;\n                _textBlock.Text = colorButton.Color.ToString();\n                _textBlock.VerticalAlignment = VerticalAlignment.Center;\n                _textBlock.Foreground = GetColor(\"#88F1FF\");\n                _textBlock.FontWeight = FontWeight.Normal;\n                stackPanel.HorizontalAlignment = HorizontalAlignment.Right;\n                stackPanel.Children.Add(_textBlock);\n                stackPanel.Children.Add(colorButton);\n               // colorButton.HorizontalAlignment = HorizontalAlignment.Right;\n                DockPanel.SetDock(stackPanel, Dock.Right);\n                dockPanel.Children.Add(stackPanel);\n            }\n        }\n        //Для перечислений\n        else if (type.IsEnum)\n        {\n            var _propElement = new ComboBox();\n            _propElement.Margin = new Thickness(0, 0, 0, 10);\n            \n            //Чтоб нормально отображался Placeholder\n            var dataTemplate = new FuncDataTemplate<string>((item, _) =>\n            {\n                var textBlock = new TextBlock{VerticalAlignment = VerticalAlignment.Center};\n                textBlock.Bind(TextBlock.TextProperty, new Binding(\".\")); \n                return textBlock;\n            });\n            _propElement.ItemTemplate = dataTemplate;\n            \n           _propElement.Foreground = GetColor(\"#88F1FF\");\n           _propElement.FontWeight = FontWeight.Normal;\n           _propElement.HorizontalAlignment = HorizontalAlignment.Right;\n           _propElement.VerticalAlignment = VerticalAlignment.Center;\n           _propElement.VerticalContentAlignment = VerticalAlignment.Bottom;\n           _propElement.Margin = new Thickness(5, 0, 0, 0);\n            var enumValues = Enum.GetValues(type);\n            \n            foreach (var _value in enumValues) \n                _propElement.Items.Add(_value.ToString());\n            _propElement.SelectedItem = value?.ToString();\n            _propElement.SelectionChanged+= OnEnumPropertyChanged;\n            DockPanel.SetDock(_propElement, Dock.Right);\n            dockPanel.Children.Add(_propElement); \n        }\n        else if (type == typeof(Boolean?) || type == typeof(bool))\n        {\n            var _propElement = new CheckBox();\n            _propElement.IsChecked = (bool)value;\n            _propElement.Width = 30;\n            _propElement.HorizontalAlignment = HorizontalAlignment.Right;\n            _propElement.Foreground = GetColor(\"#88F1FF\");\n            _propElement.FontWeight = FontWeight.Normal;\n            _propElement.HorizontalContentAlignment = HorizontalAlignment.Right;\n            _propElement.VerticalAlignment = VerticalAlignment.Center;\n            _propElement.VerticalContentAlignment = VerticalAlignment.Bottom;\n            _propElement.Margin = new Thickness(5, 0, 0, 0);\n            _propElement.IsCheckedChanged += OnBoolPropertyChanged;\n            DockPanel.SetDock(_propElement, Dock.Right);\n            dockPanel.Children.Add(_propElement);\n            \n        }\n        else if ( type == typeof(IImage))\n        {\n            var _propElement = new Button();\n            _propElement.Content = \"Выбрать\";\n            _propElement.HorizontalAlignment = HorizontalAlignment.Right;\n            _propElement.Foreground = GetColor(\"#88F1FF\");\n            _propElement.FontWeight = FontWeight.Normal;\n            _propElement.HorizontalContentAlignment = HorizontalAlignment.Right;\n            _propElement.VerticalAlignment = VerticalAlignment.Center;\n            _propElement.VerticalContentAlignment = VerticalAlignment.Bottom;\n            _propElement.Margin = new Thickness(5, 0, 0, 0);\n            _propElement.Click += OnChooseImageClick;\n            DockPanel.SetDock(_propElement, Dock.Right);\n            dockPanel.Children.Add(_propElement);\n            \n        }\n        else\n        {\n            var _propElement = new TextBox();\n            _propElement.Text = value?.ToString();\n            _propElement.Foreground = Brushes.Red;\n            _propElement.FontWeight = FontWeight.Normal;\n            _propElement.HorizontalAlignment = HorizontalAlignment.Right;\n            _propElement.Margin = new Thickness(5, 0, 0, 0);\n            _propElement.Width = 100;\n            //_propElement.KeyDown += OnPropertyChanged;\n            DockPanel.SetDock(_propElement, Dock.Right);\n            dockPanel.Children.Add(_propElement); \n        }\n\n        var border = new Border();\n        border.BorderThickness = new Thickness(0, 0, 0, 1);\n        border.BorderBrush = GetColor(\"#8897FF\");\n        border.Child = dockPanel;\n        listItem.Content = border;\n        \n        PropListItems.Add(listItem);\n    }\n\n    private SolidColorBrush GetColor(string color)\n        => new SolidColorBrush(Color.Parse(color));\n\n    //Корректировка координат для перемещения и растяжения в строгом режиме\n    double CorrectCoords(double coord)\n    {\n        if ((bool)!StrictModeEnabled.IsChecked) return Math.Round(coord);\n        if(StrictModeValue.Text == \"\") return Math.Round(coord);\n        int step = Convert.ToInt32(StrictModeValue.Text);\n        if (step <= 0) return coord;\n        var _coord = (((int)coord)/step)*step;\n        return _coord;\n\n    }\n   private double CorrectSize(double coord)\n        => CorrectCoords(coord)>0?CorrectCoords(coord):Convert.ToInt32(StrictModeValue.Text);\n\n\n    private void StrictModeEnabled_OnPropertyChanged(object? sender, AvaloniaPropertyChangedEventArgs e)\n    {\n        if (StrictModeValue == null) return;\n        try\n        {\n            var value = Convert.ToInt32(StrictModeValue.Text);\n            StrictModeValue.Text = Math.Abs(value).ToString();\n        }\n        catch \n        {\n            StrictModeValue.Text = \"\";\n        }\n    }\n\n   \n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Miscellaneous.cs b/Miscellaneous.cs
--- a/Miscellaneous.cs	(revision 6d88d179a1efbc490e8acf93ca9833ce31f897b0)
+++ b/Miscellaneous.cs	(date 1719920524496)
@@ -38,7 +38,7 @@
         {
             Text = name,
             //  DockPanel.Dock="Left" VerticalAlignment="Center"
-            Foreground = GetColor("#88F1FF"),
+            Foreground = GetColor("#0ab076"),
             FontWeight = FontWeight.Normal,
             FontSize = 18,
             HorizontalAlignment = HorizontalAlignment.Right,
@@ -57,7 +57,7 @@
         {
             var _propElement = new TextBox();
             _propElement.Text = value?.ToString();
-            _propElement.Foreground = GetColor("#88F1FF");
+            _propElement.Foreground = GetColor("#0ab076");
             _propElement.FontWeight = FontWeight.Normal;
             _propElement.HorizontalAlignment = HorizontalAlignment.Right;
             _propElement.VerticalAlignment = VerticalAlignment.Center;
@@ -170,7 +170,7 @@
 
         var border = new Border();
         border.BorderThickness = new Thickness(0, 0, 0, 1);
-        border.BorderBrush = GetColor("#8897FF");
+        border.BorderBrush = GetColor("#0ab076");
         border.Child = dockPanel;
         listItem.Content = border;
         
Index: MainWindow.axaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><Window xmlns=\"https://github.com/avaloniaui\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        xmlns:xamlade=\"clr-namespace:Xamlade\"\n       \n        xmlns:gif=\"clr-namespace:Avalonia.Gif;assembly=Avalonia.Gif\"\n        xmlns:avaloniaColorPicker=\"clr-namespace:AvaloniaColorPicker;assembly=AvaloniaColorPicker\"\n        Height=\"800\" Width=\"1200\"\n        x:Class=\"Xamlade.MainWindow\"\n        x:DataType=\"xamlade:MainWindow\"\n        Title=\"Xamlade\" Background=\"DimGray\">\n\n    \n    <DockPanel LastChildFill=\"True\">\n\n        <!-- Верхняя панель с кнопками -->\n        <StackPanel DockPanel.Dock=\"Top\" Orientation=\"Horizontal\" Background=\"#271E25\" Height=\"80\" Margin=\"2,2,2,0\">\n            <Button Width=\"150\" Content=\"Run Window\" Click=\"RUN_WINDOW\" Margin=\"10\" Background=\"#3A8FB7\" />\n            <Button Width=\"150\" Content=\"XAMLize!\" Click=\"XAMLIZE\" Margin=\"10\" Background=\"#3A8FB7\" />\n            <Button Width=\"150\" Content=\"Remove\" Click=\"RemovejElement\" Margin=\"10\" Background=\"#3A8FB7\" />\n            <Button Width=\"150\" Content=\"DEXAMLIZE\" Click=\"DEXAMLIZE\" Margin=\"10\" Background=\"#3A8FB7\" />\n            <Button Width=\"150\" Content=\"Отмена\" Click=\"UNDO\" Margin=\"10\" Background=\"#3A8FB7\" />\n            <Button Width=\"150\" Content=\"Повтор\" Click=\"REDO\" Margin=\"10\" Background=\"#3A8FB7\" />\n            <Button Width=\"150\" Content=\"DEBUG\" Click=\"DEBUG\" Margin=\"10\" Background=\"#3A8FB7\" />\n            <gif:GifImage Name=\"LoadingGif\" IsVisible=\"False\" SourceUriRaw=\"{Binding Path=SelectedGif}\"\n                          Stretch=\"None\"\n                          StretchDirection=\"Both\" />\n            <CheckBox Name=\"StrictModeEnabled\" IsChecked=\"False\" >Строгий режим</CheckBox>\n            <TextBox Name=\"StrictModeValue\" Text=\"1\" Margin=\"5,0,0,0\"\n                     PropertyChanged=\"StrictModeEnabled_OnPropertyChanged\" VerticalAlignment=\"Center\" HorizontalAlignment=\"Center\"\n                     VerticalContentAlignment=\"Center\"/>\n            \n            \n        </StackPanel>\n\n        <!-- Левая панель с иерархией проекта -->\n        <StackPanel DockPanel.Dock=\"Left\" Width=\"250\" Background=\"#1D1D1D\" Margin=\"2\">\n            <TextBlock VerticalAlignment=\"Top\" TextAlignment=\"Center\" FontSize=\"20\" Margin=\"10\" Foreground=\"#CB33F2\">Иерархия проекта</TextBlock>\n            <TreeView Name=\"MainHierarchyTree\" SelectionChanged=\"MainHierarchyTree_OnSelectionChanged\"\n                      Foreground=\"#C978EC\">\n                <!-- Ваши узлы дерева добавляются здесь -->\n            </TreeView>\n        </StackPanel>\n\n        <!-- Центральная область с вкладками -->\n        <TabControl Name=\"MainTabControl\" Background=\"#2B2B2B\" Margin=\"0,2,0,2\">\n            <TabItem Header=\"Элементы\">\n                <StackPanel Width=\"300\" Orientation=\"Vertical\" Background=\"#2B2B2B\">\n                    <Button Name=\"GenerateButton\" Content=\"Button\" Click=\"GenerateElement\"\n                            Margin=\"10,0,10,10\" />\n                    <Button Name=\"GenerateCanvas\" Content=\"Canvas\" Click=\"GenerateElement\"\n                            Margin=\"10,0,10,10\" />\n                    <Button Name=\"GenerateCheckBox\" Content=\"CheckBox\" Click=\"GenerateElement\"\n                            Margin=\"10,0,10,10\" />\n                    <Button Name=\"GenerateTextBlock\" Content=\"TextBlock\" Click=\"GenerateElement\"\n                            Margin=\"10,0,10,10\" />\n                    <Button Name=\"GenerateTextBox\" Content=\"TextBox\" Click=\"GenerateElement\"\n                            Margin=\"10,0,10,10\" />\n                    <Button Name=\"GenerateStackPanel\" Content=\"StackPanel\" Click=\"GenerateElement\"\n                            Margin=\"10,0,10,10\" />\n                    <Button Name=\"GenerateToggleButton\" Content=\"ToggleButton\" Click=\"GenerateElement\"\n                            Margin=\"10,0,10,10\" />\n                    <Button Name=\"GenerateImage\" Background=\"Chartreuse\" Content=\"Image\" Click=\"GenerateElement\"\n                            Margin=\"10,0,10,10\" />\n                </StackPanel>\n            </TabItem>\n\n            <TabItem Header=\"Свойства\">\n                <ScrollViewer VerticalScrollBarVisibility=\"Hidden\">\n                    <StackPanel Name=\"PropertyPanel\" Width=\"300\" Background=\"#2B2B2B\">\n                        <ListBox Name=\"PropListBox\" Width=\"300\" Background=\"#2B2B2B\">\n                            <ListBox.Styles>\n                                <Style Selector=\"ListBoxItem\">\n                                    <Setter Property=\"Padding\" Value=\"0\" />\n                                </Style>\n                            </ListBox.Styles>\n                        </ListBox>\n                    </StackPanel>\n                </ScrollViewer>\n            </TabItem>\n        </TabControl>\n\n        <!-- Правая область с холстом -->\n        <xamlade:jCanvas Name=\"MainCanvas\" Background=\"#1E1E1E\"\n                         PointerMoved=\"jCanvas_OnPointerMoved\" PointerPressed=\"OnjControlPressed\" Margin=\"2\">\n            <xamlade:jCanvas.Styles>\n                <FluentTheme/>\n            </xamlade:jCanvas.Styles>\n            <!-- <Image Source=\"assets/Xamlade.png\" Width=\"500\" Height=\"500\"/> -->\n            <!-- Здесь наступает власть объектов JControl -->\n        </xamlade:jCanvas>\n\n    </DockPanel>\n</Window>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MainWindow.axaml b/MainWindow.axaml
--- a/MainWindow.axaml	(revision 6d88d179a1efbc490e8acf93ca9833ce31f897b0)
+++ b/MainWindow.axaml	(date 1719921996700)
@@ -9,32 +9,111 @@
         x:DataType="xamlade:MainWindow"
         Title="Xamlade" Background="DimGray">
 
-    
-    <DockPanel LastChildFill="True">
+    <!-- Главный контейнер функциональных областей-->
+    <DockPanel Name="Carcass" LastChildFill="True">
 
         <!-- Верхняя панель с кнопками -->
-        <StackPanel DockPanel.Dock="Top" Orientation="Horizontal" Background="#271E25" Height="80" Margin="2,2,2,0">
-            <Button Width="150" Content="Run Window" Click="RUN_WINDOW" Margin="10" Background="#3A8FB7" />
-            <Button Width="150" Content="XAMLize!" Click="XAMLIZE" Margin="10" Background="#3A8FB7" />
-            <Button Width="150" Content="Remove" Click="RemovejElement" Margin="10" Background="#3A8FB7" />
-            <Button Width="150" Content="DEXAMLIZE" Click="DEXAMLIZE" Margin="10" Background="#3A8FB7" />
-            <Button Width="150" Content="Отмена" Click="UNDO" Margin="10" Background="#3A8FB7" />
-            <Button Width="150" Content="Повтор" Click="REDO" Margin="10" Background="#3A8FB7" />
-            <Button Width="150" Content="DEBUG" Click="DEBUG" Margin="10" Background="#3A8FB7" />
+        <StackPanel Name="Toolbar" DockPanel.Dock="Top" Orientation="Horizontal" Background="#271E25" Height="42" Margin="2,2,2,0">
+
+            <Border BorderThickness="2" Height="40" Width="40" BorderBrush="#20423c" Background="Transparent" >
+                <Button Width="40" Height="40" Click="XAMLIZE" Margin="0" Background="Transparent" >
+                    <StackPanel Orientation="Vertical" VerticalAlignment="Center" HorizontalAlignment="Center">
+                        <Image Source="avares://Xamlade/assets/xamlize.png" Width="25" Height="25" HorizontalAlignment="Center"/>
+                    </StackPanel>
+                    <ToolTip.Tip>
+                        <TextBlock Text="Конвертация в XAML" />
+                    </ToolTip.Tip>
+                </Button>
+            </Border>
+            <Border BorderThickness="2" Height="40" Width="40" BorderBrush="#20423c" Background="Transparent" >
+                <Button Width="40" Height="40" Click="RUN_WINDOW" Margin="0" Background="Transparent" >
+                    <StackPanel Orientation="Vertical" VerticalAlignment="Center" HorizontalAlignment="Center">
+                        <Image Source="avares://Xamlade/assets/run.png" Width="20" Height="20" HorizontalAlignment="Center"/>
+                    </StackPanel>
+                    <ToolTip.Tip>
+                        <TextBlock Text="Запуск тестового окна" />
+                    </ToolTip.Tip>
+                </Button>
+            </Border>
+            
+            
+            <Border BorderThickness="2" Height="40" Width="40" BorderBrush="#20423c" Background="Transparent" >
+                <Button Width="40" Height="40" Click="DEXAMLIZE" Margin="0" Background="Transparent" >
+                    <StackPanel Orientation="Vertical" VerticalAlignment="Center" HorizontalAlignment="Center">
+                        <Image Source="avares://Xamlade/assets/dexamlize.png" Width="25" Height="25" HorizontalAlignment="Center"/>
+                    </StackPanel>
+                    <ToolTip.Tip>
+                        <TextBlock Text="Выгрузка из XAML" />
+                    </ToolTip.Tip>
+                </Button>
+            </Border>
+            
+            <Border BorderThickness="2" Height="40" Width="40" BorderBrush="#20423c" Margin="10,0,0,0" Background="Transparent" >
+                <Button Width="40" Height="40" Click="UNDO" Margin="0" Background="Transparent" >
+                    <StackPanel Orientation="Vertical" VerticalAlignment="Center" HorizontalAlignment="Center">
+                        <Image Source="avares://Xamlade/assets/undo.png" Width="20" Height="20" HorizontalAlignment="Center"/>
+                    </StackPanel>
+                    <ToolTip.Tip>
+                        <TextBlock Text="Отмена" />
+                    </ToolTip.Tip>
+                </Button>
+            </Border>
+            <Border BorderThickness="2" Height="40" Width="40" BorderBrush="#20423c" Background="Transparent" >
+                <Button Width="40" Height="40" Click="REDO" Margin="0" Background="Transparent" >
+                    <StackPanel Orientation="Vertical" VerticalAlignment="Center" HorizontalAlignment="Center">
+                        <Image Source="avares://Xamlade/assets/redo.png" Width="20" Height="20" HorizontalAlignment="Center"/>
+                    </StackPanel>
+                    <ToolTip.Tip>
+                        <TextBlock Text="Повтор" />
+                    </ToolTip.Tip>
+                </Button>
+            </Border>
+            <Border BorderThickness="2" Height="40" Width="40" BorderBrush="#20423c" Background="Transparent" >
+                <Button Width="40" Height="40" Click="RemovejElement" Margin="0" Background="Transparent" >
+                    <StackPanel Orientation="Vertical" VerticalAlignment="Center" HorizontalAlignment="Center">
+                        <Image Source="avares://Xamlade/assets/remove.png" Width="25" Height="25" HorizontalAlignment="Center"/>
+                    </StackPanel>
+                </Button>
+            </Border>
+            
+            
+            <Border BorderThickness="2" Height="40" Width="40" BorderBrush="#20423c" Background="Transparent" Margin="10,0,0,0">
+                <Button Width="40" Height="40" Click="DEBUG" Margin="0" Background="Transparent" >
+                    <StackPanel Orientation="Vertical" VerticalAlignment="Center" HorizontalAlignment="Center">
+                        <Image Source="avares://Xamlade/assets/settings.png" Width="25" Height="25" HorizontalAlignment="Center"/>
+                    </StackPanel>
+                    <ToolTip.Tip>
+                        <TextBlock Text="Настройки" />
+                    </ToolTip.Tip>
+                </Button>
+            </Border>
+            
+            <Border BorderThickness="2" Height="40" Width="40" BorderBrush="#20423c" Background="Transparent" >
+                <Button Width="40" Height="40" Click="DEBUG" Margin="0" Background="Transparent" >
+                    <StackPanel Orientation="Vertical" VerticalAlignment="Center" HorizontalAlignment="Center">
+                        <Image Source="avares://Xamlade/assets/debug.png" Width="25" Height="25" HorizontalAlignment="Center"/>
+                    </StackPanel>
+                    <ToolTip.Tip>
+                        <TextBlock Text="Отладка" />
+                    </ToolTip.Tip>
+                </Button>
+            </Border>
+            
             <gif:GifImage Name="LoadingGif" IsVisible="False" SourceUriRaw="{Binding Path=SelectedGif}"
                           Stretch="None"
                           StretchDirection="Both" />
-            <CheckBox Name="StrictModeEnabled" IsChecked="False" >Строгий режим</CheckBox>
-            <TextBox Name="StrictModeValue" Text="1" Margin="5,0,0,0"
+            
+            
+            <CheckBox Name="StrictModeEnabled" IsChecked="False" Opacity="0">Строгий режим</CheckBox>
+            <TextBox Opacity="0" Name="StrictModeValue" Text="1" Margin="5,0,0,0"
                      PropertyChanged="StrictModeEnabled_OnPropertyChanged" VerticalAlignment="Center" HorizontalAlignment="Center"
                      VerticalContentAlignment="Center"/>
             
-            
         </StackPanel>
-
-        <!-- Левая панель с иерархией проекта -->
-        <StackPanel DockPanel.Dock="Left" Width="250" Background="#1D1D1D" Margin="2">
-            <TextBlock VerticalAlignment="Top" TextAlignment="Center" FontSize="20" Margin="10" Foreground="#CB33F2">Иерархия проекта</TextBlock>
+            
+        <!-- Панель с иерархией проекта -->
+        <StackPanel Name="HierarchyPanel" DockPanel.Dock="Right" Width="180" Background="#1D1D1D" Margin="2">
+            <TextBlock VerticalAlignment="Top" TextAlignment="Center" FontSize="20" Margin="10" Foreground="#CB33F2">Структура</TextBlock>
             <TreeView Name="MainHierarchyTree" SelectionChanged="MainHierarchyTree_OnSelectionChanged"
                       Foreground="#C978EC">
                 <!-- Ваши узлы дерева добавляются здесь -->
@@ -79,7 +158,7 @@
             </TabItem>
         </TabControl>
 
-        <!-- Правая область с холстом -->
+        <!-- Рабочая область -->
         <xamlade:jCanvas Name="MainCanvas" Background="#1E1E1E"
                          PointerMoved="jCanvas_OnPointerMoved" PointerPressed="OnjControlPressed" Margin="2">
             <xamlade:jCanvas.Styles>
Index: Reference.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Reference.txt b/Reference.txt
new file mode 100644
--- /dev/null	(date 1719908152408)
+++ b/Reference.txt	(date 1719908152408)
@@ -0,0 +1,4 @@
+Идейный вдохновитель проекта GNOME Glade
+
+В проекте использованы ресурсы:
+1.https://www.flaticon.com/free-icons/ icons created by Pixel perfect - Flaticon
\ No newline at end of file
Index: MainWindow.axaml.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing System.ComponentModel;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Linq;\nusing System.Reflection;\nusing System.Text.Json;\nusing System.Text.Json.Serialization;\nusing System.Threading.Tasks;\nusing Avalonia;\nusing Avalonia.Controls;\nusing Avalonia.Controls.Presenters;\nusing Avalonia.Input;\nusing Avalonia.Interactivity;\nusing Avalonia.Markup.Xaml;\nusing Avalonia.Media;\nusing Avalonia.Styling;\nusing Avalonia.Controls.Primitives;\nusing Avalonia.Layout;\nusing Avalonia.Gif;\nusing Avalonia.Media.Imaging;\nusing AvaloniaColorPicker;\nusing Avalonia.Markup;\nusing Microsoft.Diagnostics.Runtime;\n\nnamespace Xamlade;\n\n\n\npublic partial class MainWindow : Window\n{\n    public static MainWindow _MainWindow;\n    public string SelectedGif => @\"avares://Xamlade/RES/loading.gif\";\n\n\n    #region Globals\n\n    //Отладочный итератор\n    private int i = 0;\n\n    //Случайное число\n    private static Random random;\n\n\n    //Перемещаемый по холсту объект\n    private JControl movable;\n    \n    //Кандидат на перемещение\n    private JControl premovable;\n\n    //Выбранный в дереве элемент\n    private mTreeViewItem? selectedTreeItem;\n\n\n    //Оригинальный фон выбранного элемента\n    private IBrush? selectedOriginalBackground;\n\n    // Половина ширины перемещаемого элемента\n    private double mov_hw;\n\n    // Половина высоты перемещаемого элемента \n    private double mov_hh;\n\n    #endregion\n\n    \n    public MainWindow()\n    {\n        _MainWindow = this;\n        //\n        InitializeComponent();\n        DataContext = this;\n        WindowState = WindowState.Maximized;\n        selectedOriginalBackground = MainCanvas.Background;\n        MainHierarchyTree.Items.Add(new mTreeViewItem(MainCanvas));\n        selectedTreeItem = MainCanvas.mTreeItem;\n        MainHierarchyTree.SelectedItem = selectedTreeItem;\n        random = new Random();\n        PropListItems = constructor.Invoke(new object[] { }) as ItemCollection;\n        var listener = new GlobalKeyListener(this);\n        listener.KeyPressed += GlobalKeyPressed;\n        listener.KeyReleased += GlobalKeyReleased;\n\n    }\n    \n\n    private void GlobalKeyPressed(KeyEventArgs e)\n    {\n        if (e.Key == Key.LeftCtrl)\n            LCtrlPressed = true;\n    }\n    private void GlobalKeyReleased(KeyEventArgs e)\n    {\n        if (e.Key == Key.LeftCtrl)\n            LCtrlPressed = false;\n        else if(e.Key == Key.Delete)\n            RemovejElement(null,null);\n    }\n\n    \n    \n    private void jCanvas_OnPointerMoved(object? sender, PointerEventArgs e)\n    {\n        if (movable == null || Equals((JControl)sender!, movable) || Equals(movable, MainCanvas))\n            return;\n\n        e.Handled = true;\n\n        if (movable.jParent is not jCanvas) return;\n\n        var parentCanvas = movable.jParent as jCanvas;\n        if (e.GetCurrentPoint(parentCanvas).Properties.PointerUpdateKind != PointerUpdateKind.Other)\n            return;\n\n        Point mousePosition = e.GetPosition(parentCanvas);\n        var element = movable as Control;\n\n        if (movable.IsPressed && !LCtrlPressed)\n        {\n            Canvas.SetLeft(element, CorrectCoords(mousePosition.X - mov_hw));\n            Canvas.SetTop(element, CorrectCoords(mousePosition.Y - mov_hh));\n\n            if (Canvas.GetLeft(element) < 0)\n                Canvas.SetLeft(element, 0);\n\n            if (Canvas.GetTop(element) < 0)\n                Canvas.SetTop(element, 0);\n\n            if (Canvas.GetLeft(element) + 2 * mov_hw > parentCanvas.Bounds.Width)\n                Canvas.SetLeft(element, parentCanvas.Bounds.Width - 2 * mov_hw);\n\n            if (Canvas.GetTop(element) + 2 * mov_hh > parentCanvas.Bounds.Height)\n                Canvas.SetTop(element, parentCanvas.Bounds.Height - 2 * mov_hh);\n        }\n        else if (movable.IsPressed && LCtrlPressed)\n        {\n            if (ResizeFlag)\n            {\n                UndoList.Remove(UndoList.Last());\n                AddHistoryItem(new Change(movable, \"Size\", new Size(element.Bounds.Width, element.Bounds.Height)));\n            }\n\n            ResizeFlag = false;\n            if (double.IsNaN(element.Width))\n                element.Width = element.Bounds.Width;\n            mousePosition = e.GetPosition(element);\n            if(mousePosition.X<5 || mousePosition.Y<5)\n                return;\n            element.Width = CorrectSize(mousePosition.X);\n            element.Height = CorrectSize(mousePosition.Y);\n        }\n    }\n\n\n    private void InitMovable(JControl obj)\n    {\n        if (obj is null) return;\n        AddHistoryItem(new Change(obj, \n            \"Coordinates\",\n            new Coordinates(Canvas.GetLeft(obj as Control),Canvas.GetTop(obj as Control))));\n        movable = obj;\n        mov_hw = obj.Bounds.Width / 2;\n        mov_hh = obj.Bounds.Height / 2;\n    }\n\n    public void InitPremovable()\n    {\n        if(premovable is null) return;\n        InitMovable(premovable);\n        MainHierarchyTree.SelectedItem = (premovable).mTreeItem;\n        \n    }\n\n\n    private void XAMLIZE(object? sender, RoutedEventArgs? e)\n    {\n        ((Button)sender).Content = \"   XAMLize   \";\n\n        // selectedTreeItem.element.Background = selectedOriginalBackground;\n        Broadcast.InitXAML();\n        while (MainCanvas.XAMLRating > -1)\n        {\n            Broadcast.XAMLize();\n        }\n\n        string filePath = @\"XamladeDemo/MainWindow.axaml\";\n        var outputXAML = new List<string>();\n        outputXAML.Add(@\"<Window xmlns=\"\"https://github.com/avaloniaui\"\"\n         xmlns:x=\"\"http://schemas.microsoft.com/winfx/2006/xaml\"\"\n         xmlns:d=\"\"http://schemas.microsoft.com/expression/blend/2008\"\"\n         xmlns:mc=\"\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\"\n         mc:Ignorable=\"\"d\"\" Width=\"\"700\"\" Height=\"\"600\"\"\n         x:Class=\"\"XamladeDemo.MainWindow\"\"\n         Title=\"\"TestWindow\"\">\");\n        outputXAML.AddRange(MainCanvas.XAMLPiece);\n        outputXAML.Add(@\"</Window>\");\n        File.WriteAllLines(filePath, outputXAML);\n    }\n\n\n    public static readonly List<string> ExcludedWords = new()\n    {\n        \"jParent\", \"mTreeItem\", \"Presenter\", \"Template\", \"IsLoaded\",\n        \"DesiredSize\", \"IsMeasureValid\", \"IsArrangeValid\", \"RenderTransform\",\n        \"DataContext\", \"IsInitialized\", \"Parent\", \"ActualThemeVariant\",\n        \"Transitions\", \"Item\", \"Type\", \"IsPressed\", \"ClickMode\", \"IsDefault\", \"IsCancel\",\n        \"DataTemplates\", \"Focusable\", \"IsEnabled\", \"IsKeyboardFocusWithin\",\n        \"IsFocused\", \"IsHitTestVisible\", \"IsPointerOver\", \"IsTabStop\",\n        \"IsEffectivelyEnabled\", \"TabIndex\", \"KeyBindings\", \"GestureRecognizers\",\n        \"UseLayoutRounding\", \"ClipToBounds\", \"IsEffectivelyVisible\",\n        \"HasMirrorTransform\", \"RenderTransformOrigin\", \"ZIndex\", \"Classes\",\n        \"Styles\", \"StyleKey\", \"Resources\", \"Command\", \"HotKey\",\n        \"CommandParameter\", \"Flyout\", \"Theme\", \"Clip\", \"TemplatedParent\", \"Effect\",\n        \"OpacityMask\", \"Bounds\", \"Cursor\", \"Tag\", \"ContextFlyout\", \"ContextMenu\", \"FocusAdorner\", \"IsItemsHost\",\n        \"Children\", \"jChildren\", \"FontFamily\", \"TextDecoration\", \"ContentTemplate\", \"FlowDirection\", \"Inlines\",\n        \"TextLayout\",\n        \"XAMLRating\", \"XAMLPiece\", \"CanPaste\", \"CanUndo\",\"jImageSource\"\n    };\n\n    private void ShowProperties()\n    {\n        try\n        {\n            PropListItems.Clear();\n        }\n        catch\n        {\n            return;\n        }\n\n\n        if (selectedTreeItem.element == MainCanvas) return;\n        //  Type type = selectedTreeItem.element.GetType();\n        //   = type.GetProperties();\n\n        Type type = selectedTreeItem.element.GetType();\n        var props = type.GetProperties();\n    \n        foreach (var prop in props)\n        {\n            if (!ExcludedWords.Contains(prop.Name))\n            {\n                var prop_type = type.GetProperty(prop.Name).PropertyType;\n                AddPropItem(prop.Name, prop.GetValue(selectedTreeItem.element), prop_type);\n                //KeyValueList.Add(new KeyValue { Key = prop.Name, Value = prop.GetValue(selectedTreeItem.element)?.ToString() });\n            }\n        }\n\n        FieldInfo privateField =\n            typeof(ItemsControl).GetField(\"_items\", BindingFlags.NonPublic | BindingFlags.Instance);\n        privateField.SetValue(PropListBox, PropListItems);\n    }\n\n    // Выбрать редактируемый элемент\n    private void SelectjElement(JControl element)\n    {\n        if ((element is null) || (element.Name == null)) return;\n        selectedTreeItem = element.mTreeItem;\n        MainHierarchyTree.SelectedItem = selectedTreeItem;\n        selectedOriginalBackground = selectedTreeItem.element.Background;\n        InitMovable(selectedTreeItem.element);\n        selectedTreeItem.element.Focus();\n        ShowProperties();\n    }\n\n\n    private void MainHierarchyTree_OnSelectionChanged(object? sender, SelectionChangedEventArgs e)\n    {\n        var item = ((TreeView)sender).SelectedItem as mTreeViewItem;\n        //     if(item == selectedTreeItem) return;\n        if (item != null)\n            SelectjElement(item.element);\n        else\n            SelectjElement(MainCanvas);\n        e.Handled = true;\n    }\n\n    private void jElementClick(object? sender, RoutedEventArgs e)\n    {\n        e.Handled = true;\n        InitMovable((JControl)sender);\n        MainHierarchyTree.SelectedItem = ((JControl)sender).mTreeItem;\n    }\n\n    private void OnjControlPointerEntered(object? sender, PointerEventArgs e)\n    {\n        e.Handled = true;\n      //  Console.WriteLine(((JControl)sender).Type);\n        if (!((JControl)sender).Type.Contains(\"Button\")) return;\n      //  Console.WriteLine(\"Ok\");\n        premovable = sender as JControl;\n     //   InitMovable((JControl)sender);\n       // var element = sender as JControl;\n       // MainHierarchyTree.SelectedItem = (element).mTreeItem;\n    }\n\n    private void OnjControlPointerExited(object? sender, PointerEventArgs e)\n    {\n        e.Handled = true;\n        premovable = null;\n    }\n\n    \n    \n    private void RemovejElement(object? sender, RoutedEventArgs? e)\n    {\n        if (selectedTreeItem == MainCanvas.mTreeItem) return;\n        var element = selectedTreeItem.element;\n        var jparent = selectedTreeItem.element.jParent;\n        jparent.RemoveChild(selectedTreeItem.element);\n        \n        var parent = selectedTreeItem.Parent as mTreeViewItem;\n        parent.Items.Remove(selectedTreeItem);\n        MainHierarchyTree.SelectedItem  = (jparent.jChildren.Count > 0) ? jparent.jChildren.Last().mTreeItem : ((JControl)jparent).mTreeItem;\n        \n        var data = new Object[] {jparent,element,element.mTreeItem};\n        AddHistoryItem(new Change(element,\"Removed\",data));\n       // MainHierarchyTree.SelectedItem=selectedTreeItem.element.mTreeItem;\n        element.Dispose();\n    }\n    \n    private void OnjControlPressed(object? sender, PointerPressedEventArgs e)\n    {\n        e.Handled = true;\n        \n        InitMovable((JControl)sender);\n        var element = sender as JControl;\n        element.IsPressed = true;\n        MainHierarchyTree.SelectedItem = (element).mTreeItem;\n    }\n\n    private void OnjControlReleased(object? sender, PointerReleasedEventArgs e)\n    {\n        e.Handled = true;\n        var element = sender as JControl;\n        element.IsPressed = false;\n    }\n\n    private async void OnChooseImageClick(object? sender, RoutedEventArgs e)\n    {\n        OpenFileDialog dialog = new OpenFileDialog();\n        dialog.Title = \"Выберите изображение\";\n        dialog.AllowMultiple = false;\n        dialog.Filters.Add(new FileDialogFilter\n        {\n            Name = \"Изображения\",\n            Extensions = { \"png\", \"jpg\", \"jpeg\", \"gif\", \"bmp\" }\n        });\n        Task<string[]> task = dialog.ShowAsync(this);\n        \n        // Дожидаемся завершения задачи (await)\n        string[] result = await task;\n\n        // Обрабатываем результат\n        if (result != null && result.Length > 0)\n        {\n            string fileName = Path.GetFileName(result[0]);\n            string targetFilePath = Path.Combine(\"assets\", fileName);\n            File.Copy(result[0], targetFilePath, true);\n            ((jImage)selectedTreeItem.element).jImageSource = @\"assets/\" + fileName;\n            ((jImage)selectedTreeItem.element).Source = new Bitmap(((jImage)selectedTreeItem.element).jImageSource);\n        }\n        else\n        {\n            return;\n        }\n    }\n    private void OnEnumPropertyChanged(object? sender, SelectionChangedEventArgs e)\n    {\n        var comboBox = sender as ComboBox;\n        var parentPanel = comboBox.Parent as DockPanel;\n        var txt_blc = parentPanel.Children[0] as TextBlock;\n        var prop_name = txt_blc.Text;\n        Type jElement_type = selectedTreeItem.element.GetType();\n        var prop_type = jElement_type.GetProperty(prop_name).PropertyType;\n        var prop = jElement_type.GetProperty(prop_name);\n        object enumValue = Enum.Parse(prop_type, comboBox.SelectedItem.ToString());\n        \n        object prevalue = prop.GetValue(selectedTreeItem.element);\n        AddHistoryItem(new Change(selectedTreeItem.element,prop_name,prevalue));\n        \n        prop.SetValue(selectedTreeItem.element, enumValue);\n    }\n\n    private void OnColorChanged(object? sender, AvaloniaPropertyChangedEventArgs e)\n    {\n        if (e.Property == AvaloniaColorPicker.ColorButton.ColorProperty)\n        {\n            var colorButton = sender as ColorButton;\n            var parentPanel = colorButton.Parent.Parent as DockPanel;\n            var txt_blc = parentPanel.Children[0] as TextBlock;\n            var prop_name = txt_blc.Text;\n           \n            Type jElement_type = selectedTreeItem.element.GetType();\n            var prop_type = jElement_type.GetProperty(prop_name).PropertyType;\n            var prop = jElement_type.GetProperty(prop_name);\n           \n            object prevalue = prop.GetValue(selectedTreeItem.element);\n            AddHistoryItem(new Change(selectedTreeItem.element,prop_name,prevalue));\n           \n            prop.SetValue(selectedTreeItem.element, new SolidColorBrush(colorButton.Color));\n            var textBlock = ((StackPanel)(colorButton.Parent)).Children[0] as TextBlock;\n            textBlock.Text = colorButton.Color.ToString();\n        }\n    }\n\n    private void OnBoolPropertyChanged(object? sender, RoutedEventArgs e)\n    {\n        var checkBox = sender as CheckBox;\n        var parentPanel = checkBox.Parent as DockPanel;\n        var txt_blc = parentPanel.Children[0] as TextBlock;\n        var prop_name = txt_blc.Text;\n        Type jElement_type = selectedTreeItem.element.GetType();\n        var prop = jElement_type.GetProperty(prop_name);\n       \n        object prevalue = prop.GetValue(selectedTreeItem.element);\n        AddHistoryItem(new Change(selectedTreeItem.element,prop_name,prevalue));\n        \n        prop.SetValue(selectedTreeItem.element, checkBox.IsChecked);\n    }\n\n    private void OnPropertyChanged(object? sender, KeyEventArgs e)\n    {\n        if (e.Key != Key.Enter) return;\n        var textBox = sender as TextBox;\n\n        var parentPanel = textBox.Parent as DockPanel;\n        var txt_blc = parentPanel.Children[0] as TextBlock;\n        var prop_name = txt_blc.Text;\n        Type jElement_type = selectedTreeItem.element.GetType();\n        var prop_type = jElement_type.GetProperty(prop_name).PropertyType;\n        var prop = jElement_type.GetProperty(prop_name);\n        textBox.Foreground = new SolidColorBrush(Color.Parse(\"#88F1FF\"));\n        \n        object prevalue = prop.GetValue(selectedTreeItem.element);\n        AddHistoryItem(new Change(selectedTreeItem.element,prop_name,prevalue));\n\n        if (textBox.Text == \"не число\") return;\n        try\n        {\n            if (prop.Name == \"Name\")\n            {\n                FieldInfo privateField =\n                    typeof(StyledElement).GetField(\"_name\", BindingFlags.NonPublic | BindingFlags.Instance);\n                privateField.SetValue(selectedTreeItem.element, textBox.Text);\n                selectedTreeItem.Header = textBox.Text;\n            }\n            else if (prop.Name == \"Content\")\n                prop.SetValue(selectedTreeItem.element, textBox.Text);\n            else if (prop_type == typeof(string))\n                prop.SetValue(selectedTreeItem.element, textBox.Text);\n            else if (prop_type == typeof(int))\n                prop.SetValue(selectedTreeItem.element, Convert.ToInt32(textBox.Text));\n            else if (prop_type == typeof(double))\n            {\n                textBox.Text = textBox.Text.Replace('.', ',');\n                prop.SetValue(selectedTreeItem.element, Convert.ToDouble(textBox.Text));\n            }\n            else if (prop_type == typeof(IBrush))\n            {\n                var brush = new SolidColorBrush(Color.Parse(textBox.Text));\n                prop.SetValue(selectedTreeItem.element, brush);\n                textBox.Foreground = new SolidColorBrush(Color.Parse(textBox.Text));\n            }\n            else if (prop_type == typeof(Thickness))\n            {\n                var values = textBox.Text.Split(',');\n                var rect = new Thickness(Convert.ToInt32(values[0]), Convert.ToInt32(values[1]),\n                    Convert.ToInt32(values[2]), Convert.ToInt32(values[3]));\n                prop.SetValue(selectedTreeItem.element, rect);\n            }\n            else if (prop_type == typeof(CornerRadius))\n            {\n                var values = textBox.Text.Split(',');\n                var rect = new CornerRadius(Convert.ToInt32(values[0]), Convert.ToInt32(values[1]),\n                    Convert.ToInt32(values[2]), Convert.ToInt32(values[3]));\n                prop.SetValue(selectedTreeItem.element, rect);\n            }\n            else if (prop_type == typeof(Rect))\n            {\n                var values = textBox.Text.Split(',');\n                var rect = new Rect(Convert.ToInt32(values[0]), Convert.ToInt32(values[1]),\n                    Convert.ToInt32(values[2]), Convert.ToInt32(values[3]));\n                prop.SetValue(selectedTreeItem.element, rect);\n            }\n        }\n        catch\n        {\n            textBox.Text = \"Некорректное значение\";\n            textBox.Foreground = Brushes.Red;\n        }\n    }\n\n\n    private async void RUN_WINDOW(object? sender, RoutedEventArgs e)\n    {\n        CopyAssets();\n        LoadingGif.IsVisible = true;\n        \n        await ExecuteLinuxCommandAsync(@\"XamladeDemo/BUILD.sh\");\n        LoadingGif.IsVisible = false;\n        await ExecuteLinuxCommandAsync(@\"XamladeDemo/RUN.sh\");\n    }\n\n\n    public static void CopyAssets()\n    {\n        string[] files = Directory.GetFiles(@\"assets\");\n        string targetDirectory = @\"XamladeDemo/assets\";\n        if (!Directory.Exists(targetDirectory))\n        {\n            Directory.CreateDirectory(targetDirectory);\n        }\n        foreach (string file in files)\n        {\n            string fileName = Path.GetFileName(file);\n            string destFile = Path.Combine(targetDirectory, fileName);\n            File.Copy(file, destFile, true);\n        }\n    }\n    public static async Task<string> ExecuteLinuxCommandAsync(string command)\n    {\n        using (Process process = new Process())\n        {\n            process.StartInfo.FileName = \"/bin/bash\";\n            process.StartInfo.Arguments = $\"-c \\\"{command}\\\"\";\n            process.StartInfo.RedirectStandardOutput = true;\n            process.StartInfo.RedirectStandardError = true;\n            process.StartInfo.UseShellExecute = false;\n            process.StartInfo.CreateNoWindow = true;\n\n            process.Start();\n\n            string result = await process.StandardOutput.ReadToEndAsync();\n            string error = await process.StandardError.ReadToEndAsync();\n\n            if (!string.IsNullOrEmpty(error))\n            {\n                throw new Exception($\"Error: {error}\");\n            }\n\n            return result;\n        }\n    }\n \n\n    private async void DEXAMLIZE(object? sender, RoutedEventArgs e)\n    {\n\n\n        await RunDeXAMLIZE(this);\n\n    }\n\n    public System.String ass;\n\n    private void DEBUG(object? sender, RoutedEventArgs e)\n    {\n       \n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MainWindow.axaml.cs b/MainWindow.axaml.cs
--- a/MainWindow.axaml.cs	(revision 6d88d179a1efbc490e8acf93ca9833ce31f897b0)
+++ b/MainWindow.axaml.cs	(date 1719920069899)
@@ -71,6 +71,7 @@
         _MainWindow = this;
         //
         InitializeComponent();
+        this.Icon = new WindowIcon("Assets/Icon.png");
         DataContext = this;
         WindowState = WindowState.Maximized;
         selectedOriginalBackground = MainCanvas.Background;
@@ -185,7 +186,7 @@
             Broadcast.XAMLize();
         }
 
-        string filePath = @"XamladeDemo/MainWindow.axaml";
+        string filePath = @"C:\Users\kk\Desktop\MainWindow.axaml";
         var outputXAML = new List<string>();
         outputXAML.Add(@"<Window xmlns=""https://github.com/avaloniaui""
          xmlns:x=""http://schemas.microsoft.com/winfx/2006/xaml""
